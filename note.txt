ep9 - 
  used proj (IdentityServer, ApiOne, ApiTwo)
  in this episode, IdentityServer is used for OAuth & OIDC. ApiOne is created as an API, and ApiTwo is created to act
  as a client API calling ApiOne using the token created using ClientCredential. ApiTwo is registered in IdentityServer as
  a Client that has access to scope ApiOne. In ApiTwo/Home/Index, it first creates
  httpClient and calls the IdentityServer to get the token using Client Credential flow
  then it calls the ApiOne/secret [Authorize] with this token added to the header
  For ApiOne, in the ConfigureServices, it tells, it is authenticating from the IdentityServer using Bearer token (oidc)
  therefore, any [Authorize] method in ApiOne must have a token dealt out from IdentityServer with scope (ApiOne)
ep10 -
  used proj (IdentityServer, MvcClient)
  in this episode, it just prepares and create MvcClient to use authorization-code flow for openID connect for ep11
ep11 - 
  used proj (IdentitiyServer, MvcClient)
  in this episode, log-in and register page is created. So MVC Client page home/secret [Authorize] is first accessed, 
  it will be automatically directed to IdentityServer's login page (since the authorization-code flow is used)
  If the user is successfully registered or logged-in, it user is authenticated and will be re-directed to 
  mvcClient/home/secret page
ep12 - 
  used proj (IdentityServer, ApiOne, MvcClient)
  first, it describes the cookies created. 
  AspNetCore.Cookie - this is a cookie on the MvcClient client's side
    created and split to 1 and 2 because it's too big. it holds id token and access token. removing this
    cookie and refresh to home/seret won't force you to re-login since below cookie still exist for Identity Server.
    if you refresh /home/secret, it will still travel to identityServer/connect/authorize page and come back wihtout 
    needng user to enter credential
  IdentityServer.Cookie - holds any authentiated user info for current session stored on Identity Server side. 
    if this cookie is deleted, it will ask you to re-login only if you are missing above cookie also.
    otherwise, the current session info for the MvcClient is stored in the cookie, so it won't even redirect you to
    IdentityServer/connect/authorize page
  Idsrv.session - this cookie tells which identityi server current session is associated with. In this case the session
    is connected to the IdentityServer, but it can be google or facebook
  in this episode, custom claims are added and shows what needs to be done to have custom claims added to id-token
  also, it shows how to add/remove certain claims in the httpContext. 
  also, it shows how to add/remove claims from the IDToken and instead show them only in HttpContext.claims (requires 2 trips)
  also, it shows how to add/remove scopes in startup.cs for mvcClient
  also, it shows how to call ApiOne using the access token from MvcClient
  also, it shows how to add the claims to either ID Token or Access token
ep13 - 
  used proj (IdentityServer, MvcClient, ApiOne)
  In this episode, he implements the refresh-token using IdentityServer4
ep14 -
  used proj (IdentityServer, JavascriptClient)
  in this episode, he implements the Implicit call to get the ID-Token and Access token from IdentityServer
  also, it shows the flow from 1. click on sign-in, 2. re-direct to IdentityServer's login page, 3. if successfully logged-in
  it will re-direct to IdentityServer's internal sign-in and 4. redirect back to the client's redirect url with the
  tokens added to the url as # 5. Javascript will receive and parse the tokens (ID and Access) and store to browser's memory
  -Sign-in.js - custom way to build the callback url with all params to call IdentitiyServer's login function
  -Sign-in-callback.js - parses the string received from the IdentityServer and store ID and Access token to browsers memory
ep15 - 
  used proj (IdentityServer, MvcClient, ApiOne)
  in this episode, he shows how to implement signin re-direct using oidc-client.js instead of writing custom one as ep14
  still using the Implicit flow
  first, ApiOne is modified to allow Cors connections from the browser in the startup.cs
  next, in IdentityServer project, configuration.cs modified to add AllowedCorsOrigins of the addresss of the client ip addr
  next, removed custom .js files sign-in.js and sign-in-callback.js and added main.js to use Oidc.UserManager
  The flow is 1. User click on sign-in button, 2. .js will call the IdentityServer using the oidc.usermanager
  3. user logs-in on IdentityServer page, 4. IdentityServer will verify and logs-in, and redirects to the re-direct page
  with the ID and Access tokens, 5. Signin.cshtml simply displays the result on the console log and redirects to the index
  6. also the main.js adds the Bearer token to the header Authorization using Axios, 
  7. user clicks on the 'call apione' button, 8. use Axio (as httpContext) to call the API (Url) and will get it successfully 
ep16 -
  used proj ()
  first, it enabled LocalStorage
  LocalStorage - shared among all tabs, and survives refresh, browser close, and OS reboot, (5MB storage), 
    client-side readonly, less older browser support, no expiration, plain text and not secure
  SessionStorage - only accessible from same tab. survives refresh, but not browser close or OS reboot (5-10MB storage)
    client-side readonly, less older browser support
  Cookie - both client and server side read support, 4KB size, expiry can be set per cookie, purposed for server,
    if httpOnly flag=true, it will be secured and cannot be read by client
