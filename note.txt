ep1 - Authenticateion. Basics
  used proj (basic)
  in this episode, he shows 
  in order to access [Authorize] end-point, it needs to know if you are authorized, and in order to authorize, it needs to
  know who you are. In .net core ConfigureServices, you need to add serivces.AddAuthentication() and make sure to specify 
  how to authenticate by adding config.LoginPage = '/Home/Authenticate' to show if user is not authenticated, route to here.
  In Authenticate methods, he shows how to build claims --> identity --> principal. And using that principal he calls
  HttpContext.SignInAsync(userPrincipal) to log in (to authenticate). We still cannot call the end point with [Authorize]
  yet. In order to resolve it, need to call below, then will be able to access [Authorize] end point
  1. app.UseRouting()
  2. app.UseAuthentication()
  3. app.UseAuthorization() <-- this will actually allow to call [Authorize] if authenticated
  4. app.UseEndPoints()

ep2 - Authentication. Identity Authentication 
  used proj (IdentityExample)
  In this episode, he shows the basic way of registering and loggin in using the password using EF, and SignInManager
  and USerManager to create and login, logout.
  1. store application login stored to database (in this examle, he uses memory DB)
  2. if not logged in, services.ConfigureApplicationCookie() is setup to call /home/login and once logged in, will
  store the login info to cookie
  3. In HomeController, he uses UserManager<IdentityUSer> to create user using CreateAsync() in register()
  or find the registered user by calling FindByNameAsync() in Login()
  4. he uses SignInManager<IdentityUser> to sign in using PasswordSignInAsync() after user is created in register()
  or calls same method in Login() after the UserManager finds the user
  5. if users calls home/logout, it will call SingInManager.SignOutAsync() and will resultin removal of the cookie
  6. while logged in, user can call the home/secret endpoint

ep2b - Identity. Email verification
  used proj (IdentityExample)
  In this episode, he shows how to enable email verification as part of registration process. The registration is not complete
  until the user verifies by accessing the link. the sample link is shown below
  "http://localhost:58375/Home/VerifyEmail?userId=f966799a-95a8-44a2-bfcc-0ddc0f584092&code=CfDJ8Kaa%2BwFM9w9Kno6yk1nQK9qlIpoMlcpOyXPfWbeeRZaqLwuZXYd%2BqGuackG9p0C9gTjbz3l47Z%2FdZxNCXYZVpn8bU0trX%2B0Oy0pMsDNCnwirlYRXctdkRQbRSEJF%2BOMLM3yBgJvWuXuzVozQ7DGYon195Y2xsbltfAkGX3H1uLSTX0DHIIoppScOlS%2FUzZL7dSdoHIgFlOVrzedUsQe%2Byu9d8V%2F8%2BcSHBBYJsy9MaNX%2BVr9GeY%2BHsxldvqCGuV%2B8Kw%3D%3D"
  In this project, I had to disable actually sending portion from MailKit since it wasn't properly running.
  UserManager.GenerateEmailConfirmationTokenAsync(user) method is used to generate the code that can later be used to find
  the user when user clicks on the link. 
  VerifyEmail(userid, code) is the method called when user click on the link from the email. In this method, 
  UserManager.FindIdAsync(userIdCode) is called to find the User by the userIdCode (f966799a-95a8-44a2-bfcc-0ddc0f584092)
  If found, it calls UserManager.ConfirmEmailAsync(user, code), and this will complete the registration portion

ep3 - Authentication. Authorization (All about policies and claims)
  used proj (Basics)
  In episode ep1, he showed how the services.AddAuthorization() default way, so any user who are authenticated are
  automatically authorized. In this episode, he first shows what are under the hood as a default. 
  Next, he shows how to add policy by config.AddPolicy(...) For example, requiring DOB as claim in order to authorize,
  or require 'admin' role in order to authorize.
  Also, the end point can specify what kind of policy it requires [Authorize(Policy = "claim.DoB")] or
  [Authorize(Roles = "Admin")]
  example, user who is authenticated and missing DoB claim, has role="admin"
    will be authenticated
    will be authorized to call secret method [Authorize]
    will not be authorized to call secretPolicy [Authorize(Policy = "claim.DoB")]
    will be authorized to call seretRole [Authorize (Roles = "Admin")]
  In services.Authorization(config =>....) config.AddPolicy("Claim.DoB" is added as RequireCustomClaim). This will
  call the extension method, and within that, it will call builder.AddRequirements to add new requreClaim. Once added,
  whenever user calls any method that is marked [Authorize(Policy = "claim.DoB")], this handler for custom claim 
  HandleRequirementAsync() is called to check if the DoB claim exists or not

ep4 - Authorization. Extras (AuthorizationService & much more)
  used proj (Basics)
  in this episode, he covers alot of stuff (mostly showing how to add custom authorization handler)
  1. in DoStuff, he shows how to AuthorizeAsync within the method. The method can pass-in IAuthorizationService as a param
  and use that to call AuthorizeAsync with customPolicy and check any specific claim or something
  2. in startup, after adding services.AddAuthorization(config => ...), can add services.AddScope<IClaimsTransformation,>()
  to transform current context's identity claims. New temp claim can be added or removed on the fly by implementing 
  IClaimTransformation
  3. In startup, services.AddSingleton<IAuthorizationPolicyProvider, CustomAuthorizationPolicyProvider>() is added to custom 
  policies for authorization like [Authorize(Policy="Rank")] or [SecurityiLevel(10)]
  In order to be able to use custom authorization attribute like [SecurityLevel], need to create class as
  Public class SecurityLevelAttribute : AuthorizeAttribute
  and in CustomAuthorizationPolicyProvider, implement GetPolicyAsync() which will return the policy by matching the 
  attribute name
  (Policy) contains (requirement) which has to have (AuthorizationHandler) 
  Flow is - when user is using [securityLevel(5)] attibute, the program calls CustomAuthorizationPolicyProvider to look
  for matching registered policy first. If found, it's returned back. Then program calls the handler to handle the 
  verification. in handler, it does any kind of custom verification and call context.succeed(requirement) to grant
  authorization.
  4. OperationsController is implemented to demo how to use AuthorizationHandler using the operation
  First, need to add the services.AddScope<IAuthorizationHandler, CookieJarAuthorizationHandler>
  if you access /operations/open page, it will go to open() and IAuthorizationService.AuthorizeAsync() is called
  to decide whether to grant or not. it takes 3 params (User, cookieJar, CookieAuthOperation.Open)
  User - user context
  CookieJar - the target object
  CookieOperation.Open - what user is trying to do
  Once above method is called, it will call the handler CookieJarAuthHandler:AuthorizationHandler<requirement,cookieJar>
  in this hanlder, it will have the logic to check if the user should be authorized(granted) to cookieJar or not

ep4b - Authorization. Razor Authorization
  used proj (basic)
  in this episode, he shows how to authorize on Razor pages. Unlike regular MVC, razor pages may not have controllers,
  so you cannot use regular attributes like [Authorize]. Instead, Razor pages need to specify this on the startup.cs
  by adding services.AddRazorPAges().AddRazorPagesOptions(config => {config.convention.AuthorizePage("/secured")});
  and also add endpoints.MapRazorPages() in the Configure.
  
ep5 - OAuth. JWT Bearer
  used proj (oauth folder's server)
  in this episode, he shows how to authenticate using the JWT bearer token. To demo, he added a verification login
  in ConfigureServices withi config.TokenValidationParameters to check for specific Issuer, Audience, and key. if all
  3 values from token are matching what server is expecting, user will be authenticated. In this episode, there is no
  specific authorize policy specified, so if user is authenticated, then user is authorized by default.
  In HomeController, Authenticate(), he creates 2 claims (granny, sub) and creates a JWT token with claims, issuer,
  audience, nbf, exp, and key). Thie Authenticate() method just creates the token and displays it.
  can call the server/home/secret?access_token=[token] to access the secret end point.
  He also added a way to pass-in the token as query instead of header (in startup.cs JwtBearerEvent() onMessageReceived), 
  so we can easily test and call it from browser.

ep6 - OAuth. Auth Client (Authorization Code flow)
  used proj (OAuth folder's server, client)
  in this episode, he shows how authorization code flow works. 
  1. open browser and client and server pages open
  2. from the client browser go to localhost:44342/home/secret
  3. client's secret endpont is [Authorize], therefore the client will try to authenticate user first
  4. client is setup to authorize user if authenticated, so when trying to access [Authorize] endpoint, it will try
  to authenticate user first
  5. client's startup is setup to authenticate user from cookie first
  6. in this case, the cookie is empty, so it will try to authenticate using next method .AddOauth()
  7. .AddOauth is setup with authorization endpoint and token endpont info along with client id, secret, callback path
  8. so the ASP.NET knows it will call the server's authorize endpoint to get the authorization code first
  9. Anton mimics the user login with simple user name text box
  10. once the user types in the name and submit, it will call the authorize post endpoint to generate the auth code
  11. auth code and state will be returned back to the client's callback URL. 
  12. ASP.NET knows how to handle the callback URL, so I don't have to implement localhost:44342/oauth/callback
  13. in the background (blackbox), ASP.NET receives the auth code and calls server's token endpoint with the auth code, state,
  clientID, callback url, grant_Type (authorization code)
  14. server's token endpoint will verify the auth code (not implemented in this example for simplification), and will 
  generate the token with claims by signing the token and make it byte and add to the response body, and will redirect
  back to the client's callback url
  15. again, the ASP.NET will know how to receive the token in the background (without browser being involved) for security
  16. once client receives the token, httpcontext.user.identity.isauthenticated = true
  16. Anton shows how to add the claims to the httpcontext.user.identity.claims by adding an event to be fired everytime
  the token is received. in the event handler, he decodes the response body and parses out the claims and add them to context
  17. finally, the client's secret [Authorize] endpoint is reachable. one important thing to remember here is, the client's 
  secret [authorize] endpoint isn't accessible with the Access token received from the server. This client's secret endpoint
  is reachable since the client's startup is setup to automatically authorize if authenticated, and that's why after being
  authenticated from the server, secret endpont is reachable. The access token received from the server is not used for any
  thing in this episode. the token will be used in next episode to access the API (by adding to the Authorization header

ep7 - OAuth. securing API
  used proj (Server, Client, API)
  in this episode, he shows how to use the token created in ep6 to call the API on another server (supposedly). 
  1. he first adds a [Authorize] Validate endpoint in Server project which can only be called with the access token
  2. usual way of implementing the API is using IdentityServer, but in this episode, he shows raw way and implements
  blackbox (not shown to regular identity server users) by implementing the JwtRequirement
  3. JwtRequirement class is created to show how the API's [Authorize] is leveraging the Identity Server
  4. everytime [Authorize] endpoint of API is being accessed, JwtRequirement (custom requirement policy) is checked
  first to do some custom checking
  5. In HandleRequirementAsync(), it calls server's validate endpoint to check the access token's validity in a 
  simple manner to demonstrate how it can be done if done manually (instead of leveraging IdentityServer 4 which does
  everything automatically in the background)
  6. if validated, context.Succeed(requirement) is called and caller can access API's [Authorize] end point

ep8 - OAuth. Refresh Token
  used proj (OAuth folder Server, Client, API)
  in this episode, he first shows the API is not authenticating. If authorize fails, it automatically chanllenges, and
  if services.AddAuthentication(); is added, it means no authenticate is registered and will return 500. which menas,
  if unauthorized user calls the the [Authorize] endpoing of API, it will return 500 instead of 401. Therefore, Anton
  shows how to create a CustomAuthenticationHandler which always fails sincie API doesn't need to authenticate. This
  makes the unauthorized call to [Authorize] end point to reutrn 401 which is correct.
  Next, he shows how to implement Refresh token which is the major topic of the episode
  1. open https://localhost:44342/home/secret
  2. this secret endpont is [Authorize], and in previous episode we setup this Client startup to first check cookie
  if cookie isn't there, authenticate using the server by requesting the token. 
  once client receives the token (access and refresh), httpcontext.user.identity.isauthenticated = true and authenticated
  3. since authenticated, it can enter the Client's [Authorize] Secret endpoint
  4. in Secret(), it first calls server's [Authorize] secret with the access-token received, but access-token is setup
  to expire in milisecond, so accessing the server's secret() is denied with 401
  5. next, it will call the server's Token() end point using the refresh token. in this case it will expire in 5 minutes
  6. it calls the server's [authorize] secret() endpoint again with the new access-token and it succeeds
  7. next, it calls the API's [Authorize] Secret() endpoint with the access-token (to be expired in 5 min) and it
  also succeeds.
  8. in the Client, when it recieves the access/refresh token, it updates the cookie and re-signe in using the cookie
  9. if you click on the refresh of browser (from [client]/home/secret), the cookie is there, so won't need to 
  re-authenticate since .isAuthenticated = true
  10. since it's already authenticated, it will go into /home/secret without issues
  11. in client's secret(), it will call server's secret() and api's secret() again, and if the current access-token is
  expired, it will get a new access-token using the refresh-token just as prev steps. if the access-token isn't expired
  it will go to server and api's secret() without getting a new access-token
  12. if you delete the cookie and refresh, it will go thru login and getting the auth code and all the steps as you are
  logging in for the first time

ep9 - IdentityServer4. Client Credential (Introduction)
  used proj (IdentityServer, ApiOne, ApiTwo)
  in this episode, IdentityServer is used for OAuth & OIDC. ApiOne is created as an API, and ApiTwo is created to act
  as a client API calling ApiOne using the token created using ClientCredential. ApiTwo is registered in IdentityServer as
  a Client that has access to scope ApiOne. In ApiTwo/Home/Index, it first creates
  httpClient and calls the IdentityServer to get the token using Client Credential flow
  then it calls the ApiOne/secret [Authorize] with this token added to the header
  For ApiOne, in the ConfigureServices, it tells, it is authenticating from the IdentityServer using Bearer token (oidc)
  therefore, any [Authorize] method in ApiOne must have a token dealt out from IdentityServer with scope (ApiOne)

ep10 - IdentityServer4. Authorization Code Flow
  used proj (IdentityServer, MvcClient)
  in this episode, it just prepares and create MvcClient to use authorization-code flow for openID connect for ep11

ep11 - IdentityServer4. Identity Login & Register
  used proj (IdentitiyServer, MvcClient)
  in this episode, log-in and register page is created. So MVC Client page home/secret [Authorize] is first accessed, 
  it will be automatically directed to IdentityServer's login page (since the authorization-code flow is used)
  If the user is successfully registered or logged-in, it user is authenticated and will be re-directed to 
  mvcClient/home/secret page

ep12 - IdentityServer4. Cookie, id-token, access token, claims
  used proj (IdentityServer, ApiOne, MvcClient)
  first, it describes the cookies created. 
  AspNetCore.Cookie - this is a cookie on the MvcClient client's side
    created and split to 1 and 2 because it's too big. it holds id token and access token. removing this
    cookie and refresh to home/seret won't force you to re-login since below cookie still exist for Identity Server.
    if you refresh /home/secret, it will still travel to identityServer/connect/authorize page and come back wihtout 
    needng user to enter credential
  IdentityServer.Cookie - holds any authentiated user info for current session stored on Identity Server side. 
    if this cookie is deleted, it will ask you to re-login only if you are missing above cookie also.
    otherwise, the current session info for the MvcClient is stored in the cookie, so it won't even redirect you to
    IdentityServer/connect/authorize page
  Idsrv.session - this cookie tells which identityi server current session is associated with. In this case the session
    is connected to the IdentityServer, but it can be google or facebook
  in this episode, custom claims are added and shows what needs to be done to have custom claims added to id-token
  also, it shows how to add/remove certain claims in the httpContext. 
  also, it shows how to add/remove claims from the IDToken and instead show them only in HttpContext.claims (requires 2 trips)
  also, it shows how to add/remove scopes in startup.cs for mvcClient
  also, it shows how to call ApiOne using the access token from MvcClient
  also, it shows how to add the claims to either ID Token or Access token

ep13 - IdentityServer4. refresh token
  used proj (IdentityServer, MvcClient, ApiOne)
  In this episode, he implements the refresh-token using IdentityServer4

ep14 - IdentityServer4. implicit flow
  used proj (IdentityServer, JavascriptClient)
  in this episode, he implements the Implicit call to get the ID-Token and Access token from IdentityServer
  also, it shows the flow from 1. click on sign-in, 2. re-direct to IdentityServer's login page, 3. if successfully logged-in
  it will re-direct to IdentityServer's internal sign-in and 4. redirect back to the client's redirect url with the
  tokens added to the url as # 5. Javascript will receive and parse the tokens (ID and Access) and store to browser's memory
  -Sign-in.js - custom way to build the callback url with all params to call IdentitiyServer's login function
  -Sign-in-callback.js - parses the string received from the IdentityServer and store ID and Access token to browsers memory

ep15 - IdentityServer4. oidc-client.js
  used proj (IdentityServer, JavascriptClient, ApiOne)
  in this episode, he shows how to implement signin re-direct using oidc-client.js instead of writing custom one as ep14
  still using the Implicit flow
  first, ApiOne is modified to allow Cors connections from the browser in the startup.cs
  next, in IdentityServer project, configuration.cs modified to add AllowedCorsOrigins of the addresss of the client ip addr
  next, removed custom .js files sign-in.js and sign-in-callback.js and added main.js to use Oidc.UserManager
  The flow is 1. User click on sign-in button, 2. .js will call the IdentityServer using the oidc.usermanager
  3. user logs-in on IdentityServer page, 4. IdentityServer will verify and logs-in, and redirects to the re-direct page
  with the ID and Access tokens, 5. Signin.cshtml simply displays the result on the console log and redirects to the index
  6. also the main.js adds the Bearer token to the header Authorization using Axios, 
  7. user clicks on the 'call apione' button, 8. use Axio (as httpContext) to call the API (Url) and will get it successfully 

ep16 - IdentityServer4. persistence & claims & refreshing (implicit flow)
  used proj (IdentityServer, JavascriptClient, ApiOne)
  first, it enabled LocalStorage (so user can close the browser and reopen to connect to ApiOne without authnticating
  for persistance.
  next, he shows how to add new claims
  last, he shows how to auto-request for the token if the access token is expired, so the user won't have to re-enter
  the password. This is done via oidc.userManager.signInSilent() and this is only called if the 401 is returned. This
  makes the implicit-flow more usable without annoying the user to re-authenticate every hour or so.
  
  LocalStorage - shared among all tabs, and survives refresh, browser close, and OS reboot, (5MB storage), 
    client-side readonly, less older browser support, no expiration, plain text and not secure
  SessionStorage - only accessible from same tab. survives refresh, but not browser close or OS reboot (5-10MB storage)
    client-side readonly, less older browser support
  Cookie - both client and server side read support, 4KB size, expiry can be set per cookie, purposed for server,
    if httpOnly flag=true, it will be secured and cannot be read by client

ep 17 - IdentityServer4. EF Core setup
  used proj (IdentityServer, MvcClient, JavascriptClient ApiOne)
  this episode teaches how to convert in-memory storage to sql server storage using EF
  before anything, he calls (dotnet tool install --global dotnet-ef) to install the EF tool
  next, he calls (dotnet ef migrations add [name of the migration] -c [class name] -o [output path]). this command
  will create migration files so it can be tracked in source control. This migration is simply a middle piece between
  the database table and the model class. this needs to be updated as the model changes
  next, he calls (dotnet ef database update -c [class name for context created by migration]). this command will
  create the database
  Db-Scripts.txt shows all above commands for migrations and database
  
ep 18 - IdentityServer4. sign-out & certificate
  used proj (IdentityServer, MvcClient, JavascriptClient, ApiOne)
  in thie episode, he shows how to add the log-out on both mvcClient and JsClient
  nest, he explains how to apply certificate to the IdentityServer. using dev mode won't require it, but in production
  environment, certificate is required, and no longer needing .AddDeveloperSigningCredential();

ep 19 -  IdentityServer4. external providers (Facebook)
  used proj (IdentityServer, MvcClient, ApiOne)
  in this episode, he shows how to authenticate via Facebook. First, he shows how to get the Facebook OAuth login registered.
  Then he shows how to register the user using the Facebook OpenID, and that information is stored on the local SQL Server
  and won't require the manual registration by the user. Once registered, you can close the MVC Client and reopen, and click
  on the FAcebook, it will use cached info in the cookie to log you in again automatically, and so is the MvcClient.
  You can call the ApiOne api with this login as well.
  I added Google as another external authenticator by adding a pacakge Microsoft.aspnetcore.authentication.google
  These middlewares created by MS work as below
  1. from MvcClient project, when I try to access the secret controller end point [Authorize], it redirects me to IdentitySvr
  2. From IdentityServer AuthController, login endpoint is called with below redirect URI (URI created by IdentitySvr)
    "/connect/authorize/callback?client_id=client_id_mvc
    &redirect_uri=https%3A%2F%2Flocalhost%3A44322%2Fsignin-oidc
    &response_type=code
    &scope=openid%20rc.scope%20ApiOne%20ApiTwo%20offline_access
    &code_challenge=etCFPbmxcr3qwkUtSRu789qEtCYds3a-QwGoapOEpXk
    &code_challenge_method=S256
    &response_mode=form_post
    &nonce=637405791220096234.NmMyZWJmOTgtMzIzNy00NDkzLTk00YzY1LTliYjMtMWRjM2ExYTA1ODNj
    &state=CfDJ8Kaa-wFM9w9Kno6yk1nQK9rRT3SMPGBXUUZCNqsMw
    &x-client-SKU=ID_NETSTANDARD2_0
    &x-client-ver=5.5.0.0"
  3. login view will display the external login buttons on the fly
  4. once you click on external authenticator button (either Google or Facebook), it will call EXternalLogin method
  5. Challenge() will open Google/Facebook login page for oidc
  6. IdentiySvr automatically attaches the signin-google or signin-facebook at the end of the redirect URL of the identitySvr
  7. so if the Identity server is https://localhost:44305, you must register https://localhost:44305/signin-google or facebook
  8. after sign-in successfully, the callback function ExternalLoginCallback is called 
  9. within this callback function, it first checks to see if sign-in. if success, it will return you back to the home/secret
  10. if you fail to sign-in, mean you are not registered. it will direct you to register page with username pre-populated
  11. if you click on register button, it will try to create new user (register), and add login, and sign-in and to home/secret
  
  one thing to remeber is, external auth (facebook or google) is only for authenticating. In this example, the MvcClient, once
  you are authenticated, you can go into the [Authorize] end-points of MvcClient project. This MvcClient accessing ApiOne using
  ClientCredential is separate issue (nothing todo with external auth. Accessing ApiOne is done by using client ID, client
  secret, redirect URL, and scope that are pre-registered in configuration.cs, so the ID Token or Access Token that is used to
  call ApiOne has no user info (such as google or facebook)
  
  once you login using facebook or google, login is stored in the database, so until it expires, you won't need to re-login

ep 20 - IdentityServer4.PKCE
  used proj (IdentityServer, MvcClient, JavaScript Client, ApiOne)
  in this episode, PKCE is used to enhance the security of Javascript Client. This won't do much for MvcClient or any kind
  of web app that can securely call to get the ID Token or Access Token, but JavaScript client, it needs more security.
  Once it calls the IS, it receives a code, and that code is used by oidc_client to request Access and ID tokens.
  He is brief in explaining, so need to do more research on this PKCE to trully understand this.

ep 21 - IdentityServer4. WPF
  used proj (IdentityServer, WPF Client, ApiOne)
  in this episode, he create new WPF client and shows how it can leverage IS to get the user authenticated, and also get the
  Access token to call the ApiOne.
  OnButtonClick on the wpf form, it will 1. create oidc client with the information already registered in IS configuration.cs
  2. call oidcClient.LoginAsync() this will call the IS AuthController.Login() 3. login form is displayed on the WPF browser
  4. user can login with the pwd or external auth (google/facebook) 5. once successfully logged in, oidcClient.LoginAsync()
  called in step #2 will receive result back. that means the redirectUri passed into oidcClient is not really used or used
  in the background to process and parse the result sent by the IS and create the result object and returns it. all dirty
  work in sending the code and receiving the result and parsing the tokens are done behind the back by the oidcClient
  6. we get the User object from the result to determine if the login was successful or not. 7. we can get the accessToken 
  from the result object, and use that to call the ApiOne
  
ep 22 -IdentityServer4. Xamarin
  this is actually 21.2 Xamarin
  used proj (IdentityServer - ran uisng dotnet run in background, ApiOne - same,  XamarinApp.Android)
  was not able to run this proj since the Xamarin was not building correctly. 
  Since localhost of the Xamarin was conflicting with localhost of the windows machine, he had to use actual IP address
  for ApiOne.
  this proj is pretty similar with ep21 in a sense of using oidc_client and pkce. What's registered in IdentityServer
  in configuration.cs is almost same. revisit this project when needed to study Xamarin
